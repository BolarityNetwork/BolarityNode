[package]
name = "bolarity-node"
version = "0.1.0"
description = "Bolarity node implementation in Rust."
authors.workspace = true
repository.workspace = true
edition.workspace = true
publish = false

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
# third-party dependencies
array-bytes = { workspace = true }
clap = { workspace = true, optional = true }
codec = { workspace = true }
serde = { workspace = true }
jsonrpsee = { workspace = true }
futures = { workspace = true }
log = { workspace = true }
rand = { workspace = true }

# substrate primitives
sp-authority-discovery = { workspace = true }
sp-consensus-babe = { workspace = true }
beefy-primitives = { workspace = true }
grandpa-primitives = { workspace = true }
sp-api = { workspace = true }
sp-core = { workspace = true }
sp-runtime = { workspace = true }
sp-timestamp = { workspace = true }
sp-genesis-builder = { workspace = true }
sp-inherents = { workspace = true }
sp-keyring = { workspace = true }
sp-keystore = { workspace = true }
sp-consensus = { workspace = true }
sp-transaction-storage-proof = { workspace = true }
sp-io = { workspace = true }
sp-mixnet = { workspace = true }
sp-mmr-primitives = { workspace = true }
sp-statement-store = { workspace = true }

# substrate client dependencies
mmr-rpc = { workspace = true }
sc-client-api = { workspace = true }
sc-chain-spec = { workspace = true }
sc-consensus = { workspace = true }
sc-transaction-pool = { workspace = true }
sc-transaction-pool-api = { workspace = true }
sc-statement-store = { workspace = true }
sc-network = { workspace = true }
sc-network-common = { workspace = true }
sc-network-sync = { workspace = true }
sc-network-statement = { workspace = true }
sc-consensus-slots = { workspace = true }
sc-consensus-babe = { workspace = true }
sc-consensus-babe-rpc = { workspace = true }
sc-consensus-beefy-rpc = { workspace = true }
sc-consensus-grandpa-rpc = { workspace = true }
sc-rpc-spec-v2 = { workspace = true }
beefy = { workspace = true }
grandpa = { workspace = true }
mmr-gadget = { workspace = true }
sc-rpc = { workspace = true }
sc-rpc-api = { workspace = true }
sc-basic-authorship = { workspace = true }
sc-service = { workspace = true, default-features = false }
sc-telemetry = { workspace = true }
sc-executor = { workspace = true }
sc-authority-discovery = { workspace = true }
sc-mixnet = { workspace = true }
sc-sync-state-rpc = { workspace = true }
sc-sysinfo = { workspace = true }
sc-storage-monitor = { workspace = true }
sc-offchain = { workspace = true }

# substrate frame dependencies
frame-benchmarking = { workspace = true }
frame-system = { workspace = true }
frame-system-rpc-runtime-api = { workspace = true }
pallet-assets = { workspace = true }
pallet-asset-conversion-tx-payment = { workspace = true }
pallet-asset-tx-payment = { workspace = true }
pallet-im-online = { workspace = true }
pallet-skip-feeless-payment = { workspace = true }
pallet-transaction-payment-rpc = { workspace = true }

# substrate utilities dependencies
substrate-frame-rpc-system = { workspace = true }
substrate-state-trie-migration-rpc = { workspace = true }

# node-specific dependencies
bolarity-runtime = { path = "../runtime" }
#node-rpc = { path = "../rpc" }
#node-primitives = { path = "../primitives" }

# CLI-specific dependencies
sc-cli = { workspace = true, optional = true }
frame-benchmarking-cli = { workspace = true, optional = true }
serde_json = { workspace = true, default-features = true }

[dev-dependencies]
sc-keystore = { workspace = true }
sc-client-db = { workspace = true }
sc-consensus = { workspace = true }
sc-consensus-babe = { workspace = true }
sc-consensus-epochs = { workspace = true }
sc-service-test = { workspace = true }
sc-block-builder = { workspace = true }
sp-tracing = { workspace = true }
sp-blockchain = { workspace = true }
sp-block-builder = { workspace = true }
sp-crypto-hashing = { workspace = true }
futures = "0.3.30"
tempfile = "3.1.0"
assert_cmd = "2.0.2"
nix = { version = "0.26.1", features = ["signal"] }
regex = "1.6.0"
platforms = "3.0"
soketto = "0.7.1"
criterion = { version = "0.4.0", features = ["async_tokio"] }
tokio = { version = "1.22.0", features = ["macros", "parking_lot", "time"] }
tokio-util = { version = "0.7.4", features = ["compat"] }
wait-timeout = "0.2"
substrate-rpc-client = { workspace = true }
pallet-timestamp = { workspace = true }
substrate-cli-test-utils = { workspace = true }

wat = "1.0"
frame-support = { workspace = true }
node-testing = { workspace = true }
pallet-balances = { workspace = true }
pallet-contracts = { workspace = true }
pallet-glutton = { workspace = true }
pallet-sudo = { workspace = true }
pallet-treasury = { workspace = true }
pallet-transaction-payment = { workspace = true }
sp-application-crypto = { workspace = true }
pallet-root-testing = { workspace = true }
sp-consensus-babe = { workspace = true }
sp-externalities = { workspace = true }
sp-keyring = { workspace = true }
sp-runtime = { workspace = true }
serde_json = { workspace = true, default-features = true }
scale-info = { version = "2.11.1", features = ["derive", "serde"] }
sp-trie = { workspace = true }
sp-state-machine = { workspace = true }

[features]
default = []
# Dependencies that are only required if runtime benchmarking should be built.
runtime-benchmarks = [
    "frame-benchmarking/runtime-benchmarks",
    "frame-support/runtime-benchmarks",
    "frame-system/runtime-benchmarks",
#    "bolarity-runtime/runtime-benchmarks",
#    "node-inspect?/runtime-benchmarks",
    "pallet-asset-tx-payment/runtime-benchmarks",
    "pallet-assets/runtime-benchmarks",
    "pallet-balances/runtime-benchmarks",
    "pallet-contracts/runtime-benchmarks",
    "pallet-glutton/runtime-benchmarks",
    "pallet-im-online/runtime-benchmarks",
    "pallet-skip-feeless-payment/runtime-benchmarks",
    "pallet-sudo/runtime-benchmarks",
    "pallet-timestamp/runtime-benchmarks",
    "pallet-treasury/runtime-benchmarks",
    "sc-client-db/runtime-benchmarks",
    "sc-service/runtime-benchmarks",
    "sp-runtime/runtime-benchmarks",
]
# Enable features that allow the runtime to be tried and debugged. Name might be subject to change
# in the near future.
try-runtime = [
    "frame-support/try-runtime",
    "frame-system/try-runtime",
#    "bolarity-runtime/try-runtime",
    "pallet-asset-conversion-tx-payment/try-runtime",
    "pallet-asset-tx-payment/try-runtime",
    "pallet-assets/try-runtime",
    "pallet-balances/try-runtime",
    "pallet-contracts/try-runtime",
    "pallet-glutton/try-runtime",
    "pallet-im-online/try-runtime",
    "pallet-root-testing/try-runtime",
    "pallet-skip-feeless-payment/try-runtime",
    "pallet-sudo/try-runtime",
    "pallet-timestamp/try-runtime",
    "pallet-transaction-payment/try-runtime",
    "pallet-treasury/try-runtime",
    "sp-runtime/try-runtime",
    "substrate-cli-test-utils/try-runtime",
]
